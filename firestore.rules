rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isCompanyMember(companyId) {
      return isAuthenticated() && getUserData().company_id == companyId;
    }
    
    function isCompanyAdmin(companyId) {
      return isCompanyMember(companyId) && getUserData().role in ['company_admin', 'hr_admin'];
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/super-admins/$(request.auth.uid));
    }

    // EXISTING RULES

    // Draft registrations (anonymous access for registration flow)
    match /draft_registrations/{registrationId} {
      allow read, write: if true; // Temporary data, auto-expires in 7 days
    }

    // Companies collection
    match /companies/{companyId} {
      // Public read for subdomain availability checking
      allow read: if true;
      // Only company admins can create/update their company
      allow create: if isAuthenticated() && 
                     request.auth.uid == resource.data.adminUserId;
      allow update: if isCompanyAdmin(companyId);
      allow delete: if isCompanyAdmin(companyId) || isSuperAdmin();
    }

    // Users collection
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      // Company admins can read their company's users
      allow read: if isAuthenticated() && 
                   getUserData().role in ['company_admin', 'hr_admin'] &&
                   resource.data.company_id == getUserData().company_id;
    }

    // Company sub-collections (complete data isolation)
    match /companies/{companyId}/{document=**} {
      allow read, write: if isCompanyMember(companyId);
    }

    // Super admin collections
    match /super-admins/{adminId} {
      allow read, write: if isAuthenticated() && request.auth.uid == adminId;
    }

    match /platform-analytics/{document=**} {
      allow read: if isSuperAdmin();
      allow write: if false; // Cloud Functions only
    }

    // ✅ FIXED: SUBDOMAIN COLLECTION RULES WITH PROPER UPDATE PERMISSIONS

    // Subdomain collection for fast availability checking
    match /subdomains/{subdomain} {
      // ✅ Public read access for subdomain availability checking
      allow read: if true;
      
      // ✅ FIXED: Allow creation and updates during registration
      allow create: if true; // Allow anonymous subdomain reservation during registration
      
      // ✅ FIXED: Allow updates for timestamp refresh and status changes
      allow update: if 
        // Case 1: Anonymous update during registration (timestamp refresh)
        true ||
        
        // Case 2: Authenticated user updating their own reservation
        (isAuthenticated() && 
         resource.data.registrationId is string) ||
        
        // Case 3: Company admin updating their own subdomain
        (isAuthenticated() && 
         resource.data.companyId != null &&
         isCompanyAdmin(resource.data.companyId)) ||
        
        // Case 4: Super admin can manage any subdomain
        isSuperAdmin();
      
      // ✅ Allow deletion for cleanup operations
      allow delete: if 
        // System cleanup: expired pending subdomains
        (resource.data.status == 'pending' && 
         resource.data.expiresAt < request.time) ||
        
        // Super admin can delete any subdomain
        isSuperAdmin();
    }
  }
}